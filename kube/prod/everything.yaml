# Mysql - Volume
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: do-block-storage    
---
# Mysql - App
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_DATABASE
          value: expensetracker
        - name: MYSQL_ROOT_PASSWORD
          value: root
        ports:
        - containerPort: 3306
          name: mysql
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-data
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
# Mysql - Service
apiVersion: v1
kind: Service
metadata:
  labels:
    service: mysql
  name: mysql
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
# Spring - App
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: spring
  name: spring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring
  strategy: {}
  template:
    metadata:
      labels:
        app: spring
    spec:
      containers:
      - args:
        - java -jar app.jar
        image: acrackintheice/expense-tracker-spring
        imagePullPolicy: "Always"
        name: spring
        ports:
        - containerPort: 8080
        resources: {}
        workingDir: /usr/src/spring
      restartPolicy: Always
---
# Spring - Service
kind: Service
apiVersion: v1
metadata:
  name: spring
spec:
  type: ClusterIP
  selector:
    app: spring
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# React Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: react
  name: react
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react
  strategy: {}
  template:
    metadata:
      labels:
        app: react
    spec:
      containers:
      - args:
        - bash
        - -c
        - npm start
        image: acrackintheice/expense-tracker-react
        imagePullPolicy: Always
        name: react
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources: {}
        workingDir: /usr/src/react
      restartPolicy: Always
      serviceAccountName: ""
status: {}
---
# React Service
apiVersion: v1
kind: Service
metadata:
  labels:
    service: react
  name: react
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: react
---
# Ingress     
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: react.acrackintheice.com
    http:
      paths:
      - backend:
          serviceName: react
          servicePort: 80
  - host: api.acrackintheice.com
    http:
      paths:
      - backend:
          serviceName: spring
          servicePort: 8080